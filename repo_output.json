{
    "Repo Summary": {
        "total_files": 2,
        "processed_files": 2,
        "skipped_files": 0,
        "skipped_reasons": []
    },
    "Directory Structure": {},
    "Files": {
        "Path: pythonAPIPractice/githubAPI.py": {
            "status": "processed",
            "content": "import requests\nimport base64\nimport chardet\nimport json\n\n# Summary class to keep track of data about repo processing\nclass Summary:\n    def __init__(self):\n        self.repo_summary = {\n            \"total_files\": 0,\n            \"processed_files\": 0,\n            \"skipped_files\": 0,\n            \"skipped_reasons\": []\n        }\n\n        self.directory_structure = {}\n\n        self.files = {}\n\n    def process_file(self, path, status, content):\n\n        self.files[f\"Path: {path}\"] = {\n            \"status\": status,\n            \"content\": content\n        }\n        \n        self.repo_summary[\"total_files\"] += 1\n        if status == \"processed\":\n            self.repo_summary[\"processed_files\"] += 1\n        elif status == \"skipped\":\n            self.repo_summary[\"skipped_files\"] +=1\n            self.repo_summary[\"skipped_reasons\"].append(content)\n\n    def add_directory(self, directory_name, files_or_subdirs):\n        self.directory_structure[directory_name] = files_or_subdirs\n\n    def get_repo_summary(self):\n        return self.repo_summary\n        \n    def get_directory_structure(self):\n        return self.directory_structure\n        \n    def get_files(self):\n        return self.files\n        \n    def print_summary(self):\n\n        data = {}\n        data[\"Repo Summary\"] = self.get_repo_summary()\n        data[\"Directory Structure\"] = self.get_directory_structure()\n        data[\"Files\"] = self.get_files()\n\n        return data\n\n\n\n        \n\ndef parse_url(repo_url):\n    return repo_url.rstrip('/').split('/')[-2:]\n\ndef check_response_code(response, repo_name, token=None):\n    # check response code and respond accordingly\n    # 401 (unauthorized) or 403 (Forbidden)\n    if response.status_code in [401, 403]:\n        if not token:\n            # if no token was given, ask for one\n            print(f\"Error: Repository '{repo_name}' is private. Authentication token required.\")\n            return False\n        else:\n            # if invalid token was given, ask for a new one\n            print(f\"Error: Invalid token or permission issue for '{repo_name}'.\")\n            return False\n    elif response.status_code != 200:\n        print(f\"Error {response.status_code}: {response.text}\")\n        return False\n    else:\n        return True\n\ndef fetch_file_content(summary, owner, repo_name, file_path, token=None):\n    # Fetch the content of a file in the GitHub repo\n    api_url = f\"https://api.github.com/repos/{owner}/{repo_name}/contents/{file_path}\"\n\n    # try to fetch with token if given, without if it isn't\n    headers = {}\n    if token:\n        headers['Authorization'] = f\"token {token}\"\n    response = requests.get(api_url, headers=headers)\n\n\n    # end function if request is unsuccessful\n    if not check_response_code(response, repo_name, token):\n        summary.process_file( \n            (f'{repo_name}/{file_path}'), \n            'skipped',\n            (f\"Error {response.status_code}: {response.text}\")\n            )\n        return None\n    \n    file_data = response.json()\n    # get file content\n    content = base64.b64decode(file_data['content'])\n\n    # decect encoding\n    detected_encoding = chardet.detect(content)['encoding']\n\n    if detected_encoding in ['utf-8', 'ascii']:\n        # decode the content only if it's utf-8\n        try:\n            decoded_content = content.decode('utf-8')\n            \n            summary.process_file(\n                (f\"{repo_name}/{file_path}\"),\n                'processed',\n                (f\"{decoded_content}\")\n            )\n            return None\n        except UnicodeDecodeError:\n            summary.process_file(\n                (f\"{repo_name}/{file_path}\"),\n                'skipped',\n                (f\"Error decoding {file_path}: Content isn't valid UTF-8\")\n            )\n            return None\n    else:\n        summary.process_file(\n            (f\"{repo_name}/{file_path}\"),\n            'skipped',\n            (f\"Skipping {file_path}: Detected encoding is {detected_encoding}\")\n        )\n        return None\n\ndef fetch_repo_content(summary, repo_url, token=None):\n    # Extract repo owner and name from URL (user/repo-name)\n    repo_parts = parse_url(repo_url)\n    owner, repo_name = repo_parts[0], repo_parts[1]\n\n    return process_directory(summary, owner, repo_name, '', token)\n\n\ndef process_directory(summary, owner, repo_name, directory_path, token=None):\n\n    # GitHub API endpoint to fetch the repository contents\n    api_url = f\"https://api.github.com/repos/{owner}/{repo_name}/contents{directory_path}\"\n    response = requests.get(api_url, token)\n\n    # end function if request is unsuccessful\n    if not check_response_code(response, repo_name, token):\n        summary.process_file( \n            (f'{repo_name}/{directory_path}'), \n            'skipped',\n            (f\"Error {response.status_code}: {response.text}\")\n            )\n        return None\n\n    contents = response.json()\n    directory_data = {}\n\n    for item in contents:\n        if item['type'] == 'file':\n            fetch_file_content(summary, owner, repo_name, item['path'])\n        elif item['type'] == 'dir':\n            process_directory(summary, owner, repo_name, item['path'])\n        directory_data[item['path']] = item['type']\n    return None\n\n\ndef main():\n\n    repo_url = input(\"Enter the Github repo url: \")\n    token = input(\"Enter the GitHub authentication token (optional, press Enter to skip): \")\n\n    summary = Summary()\n\n    fetch_repo_content(summary, repo_url, token.strip() if token else None)\n\n    output_file_path = \"repo_output.json\"\n\n    data = summary.print_summary()\n\n    with open(output_file_path, \"w\") as json_file:\n        json.dump(data, json_file, indent=4, ensure_ascii=True)\n\nif __name__ == \"__main__\":\n    main()"
        },
        "Path: pythonAPIPractice/repo_output.json": {
            "status": "processed",
            "content": "{\n    \"Repo Summary\": {\n        \"total_files\": 1,\n        \"processed_files\": 1,\n        \"skipped_files\": 0,\n        \"skipped_reasons\": []\n    },\n    \"Directory Structure\": {},\n    \"Files\": {\n        \"Path: pythonAPIPractice/githubAPI.py\": {\n            \"status\": \"processed\",\n            \"content\": \"import requests\\nimport base64\\nimport chardet\\n\\n# Summary class to keep track of data about repo processing\\nclass Summary:\\n    def __init__(self):\\n        self.processed_files_count = 0\\n        self.skipped_files_count = 0\\n        self.skipped_files_reasons = []\\n\\n    def increment_processed(self):\\n        self.processed_files_count += 1\\n\\n    def increment_skipped(self, reason):\\n        self.skipped_files_count += 1\\n        self.skipped_files_reasons.append(reason)\\n\\ndef parse_url(repo_url):\\n    return repo_url.rstrip('/').split('/')[-2:]\\n\\ndef check_response_code(response, repo_name, token=None):\\n    # check response code and respond accordingly\\n    # 401 (unauthorized) or 403 (Forbidden)\\n    if response.status_code in [401, 403]:\\n        if not token:\\n            # if no token was given, ask for one\\n            print(f\\\"Error: Repository '{repo_name}' is private. Authentication token required.\\\")\\n            return False\\n        else:\\n            # if invalid token was given, ask for a new one\\n            print(f\\\"Error: Invalid token or permission issue for '{repo_name}'.\\\")\\n            return False\\n    elif response.status_code != 200:\\n        print(f\\\"Error {response.status_code}: {response.text}\\\")\\n        return False\\n    else:\\n        return True\\n\\ndef fetch_file_content(summary, owner, repo_name, file_path, token=None):\\n    # Fetch the content of a file in the GitHub repo\\n    api_url = f'https://api.github.com/repos/{owner}/{repo_name}/contents/{file_path}'\\n\\n    # try to fetch with token if given, without if it isn't\\n    headers = {}\\n    if token:\\n        headers['Authorization'] = f'token {token}'\\n    response = requests.get(api_url, headers=headers)\\n\\n\\n    # end function if request is unsuccessful\\n    if not check_response_code(response, repo_name, token):\\n        summary.increment_skipped(f\\\"Error {response.status_code}: {response.text}\\\")\\n        return None\\n    \\n    file_data = response.json()\\n    # get file content\\n    content = base64.b64decode(file_data['content'])\\n\\n    # decect encoding\\n    detected_encoding = chardet.detect(content)['encoding']\\n\\n    if detected_encoding in ['utf-8', 'ascii']:\\n        # decode the content only if it's utf-8\\n        try:\\n            decoded_content = content.decode('utf-8')\\n            return decoded_content\\n        except UnicodeDecodeError:\\n            summary.increment_skipped(f\\\"Error decoding {file_path}: Content isn't valid UTF-8\\\")\\n            return None\\n    else:\\n        summary.increment_skipped(f\\\"Skipping {file_path}: Detected encoding is {detected_encoding}\\\")\\n        return None\\n\\ndef fetch_repo_content(summary, repo_url, token=None):\\n    # Extract repo owner and name from URL (user/repo-name)\\n    repo_parts = parse_url(repo_url)\\n    owner, repo_name = repo_parts[0], repo_parts[1]\\n\\n    return process_directory(summary, owner, repo_name, '', token)\\n\\n\\ndef process_directory(summary, owner, repo_name, directory_path, token=None):\\n\\n    # GitHub API endpoint to fetch the repository contents\\n    api_url = f'https://api.github.com/repos/{owner}/{repo_name}/contents{directory_path}'\\n    response = requests.get(api_url, token)\\n\\n    # end function if request is unsuccessful\\n    if not check_response_code(response, repo_name, token):\\n        summary.increment_skipped(f\\\"Error {response.status_code}: {response.text}\\\")\\n        return None\\n\\n    contents = response.json()\\n    repo_data = {}\\n\\n    for item in contents:\\n        if item['type'] == 'file':\\n            file_content = fetch_file_content(summary, owner, repo_name, item['path'])\\n            if file_content:\\n                repo_data[item['path']] = file_content\\n        elif item['type'] == 'dir':\\n            # Recursively process subdirectories\\n            repo_data[item['path']] = process_directory(summary, owner, repo_name, item['path'])\\n\\n    return repo_data\\n\\ndef generate_summary(summary):\\n    print(f\\\"Total files processed: {summary.processed_files_count}\\\")\\n    print(f\\\"Total files skipped: {summary.skipped_files_count}\\\")\\n    if summary.skipped_files_count > 0:\\n        print(\\\"Reasons for skipped files:\\\")\\n        for reason in summary.skipped_files_reasons:\\n            print(f\\\"- {reason}\\\")\\n\\ndef main():\\n    repo_url = input(\\\"Enter the Github repo url: \\\")\\n    token = input(\\\"Enter the GitHub authentication token (optional, press Enter to skip): \\\")\\n\\n    summary = Summary()\\n\\n    repo_content = fetch_repo_content(summary, repo_url, token.strip() if token else None)\\n\\n    generate_summary(summary)\\n\\n    if(repo_content):\\n        print(\\\"Success\\\")\\n    else:\\n        print(\\\"Failure\\\")\\n\\nif __name__ == \\\"__main__\\\":\\n    main()\"\n        }\n    }\n}"
        }
    }
}